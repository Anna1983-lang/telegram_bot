# main.py
import asyncio
import logging
import os
from datetime import datetime
from textwrap import wrap

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
# –¢–æ–∫–µ–Ω: —á–∏—Ç–∞–µ–º –∏–∑ ENV, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–π (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é)
TOKEN = os.environ.get("TELEGRAM_TOKEN", "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w")
# ADMIN ID: —á–∏—Ç–∞–µ—Ç –∏–∑ ENV –∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —á–∏—Å–ª–æ
ADMIN_ID = int(os.environ.get("ADMIN_ID", "1227847495"))

POLICY_PDF = "policy.pdf"       # —Ñ–∞–π–ª –ø–æ–ª–∏—Ç–∏–∫–∏ (–≤ —Ä–µ–ø–æ)
CONSENT_PDF = "consent2.pdf"    # —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–∏—è (–≤ —Ä–µ–ø–æ) ‚Äî —Ç—ã —Å–∫–∞–∑–∞–ª–∞ –æ–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω
EXCEL_FILE = "consents.xlsx"    # –µ–¥–∏–Ω—ã–π Excel-—Ñ–∞–π–ª

router = Router()

# ---------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Excel/PDF ----------
def init_excel_if_needed(path: str):
    if os.path.exists(path):
        return
    wb = Workbook()
    ws = wb.active
    ws.title = "Consents"
    ws.append(["Timestamp", "User ID", "Username", "First name", "Last name", "Status"])
    widths = [20, 15, 25, 20, 20, 15]
    for i, w in enumerate(widths, start=1):
        ws.column_dimensions[get_column_letter(i)].width = w
    wb.save(path)

def read_last_status_for_user(path: str, user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è user_id –∏–ª–∏ None."""
    if not os.path.exists(path):
        return None
    wb = load_workbook(path, read_only=True)
    ws = wb.active
    last = None
    for row in ws.iter_rows(min_row=2, values_only=True):
        # row: Timestamp, User ID, Username, First, Last, Status
        try:
            uid = int(row[1])
        except Exception:
            continue
        if uid == user_id:
            last = row[5]
    return last

def append_excel_entry(path: str, ts: str, user, status: str):
    init_excel_if_needed(path)
    wb = load_workbook(path)
    ws = wb.active
    ws.append([
        ts,
        user.id,
        user.username or "",
        user.first_name or "",
        user.last_name or "",
        status
    ])
    wb.save(path)

def make_confirmation_pdf(filename: str, user, status: str, ts: str) -> str:
    c = canvas.Canvas(filename, pagesize=A4)
    width, height = A4
    y = height - 40

    c.setFont("Helvetica-Bold", 14)
    c.drawString(40, y, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    y -= 26

    c.setFont("Helvetica", 11)
    header = [
        f"–í—ã–±–æ—Ä: {status}",
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ts}",
        f"Telegram: @{user.username}" if user.username else f"Telegram user_id: {user.id}",
        f"–§–ò–û: {(user.first_name or '')} {(user.last_name or '')}".strip(),
        f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {POLICY_PDF} / {CONSENT_PDF}"
    ]
    for hl in header:
        for line in wrap(hl, 100):
            c.drawString(40, y, line)
            y -= 16
    y -= 8

    body = ("–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ–ª–µ–∏–∑—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ. "
            "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤ PDF.")
    for line in wrap(body, 100):
        if y < 60:
            c.showPage()
            y = height - 40
            c.setFont("Helvetica", 11)
        c.drawString(40, y, line)
        y -= 16

    c.save()
    return filename

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@router.message(CommandStart())
async def start(m: Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ (PDF)", callback_data="policy_pdf"),
            types.InlineKeyboardButton(text="üìù –°–æ–≥–ª–∞—Å–∏–µ (PDF)", callback_data="consent_pdf"),
        ],
        [
            types.InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree"),
        ],
    ])
    await m.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (PDF), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω¬ª –∏–ª–∏ ¬´‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª.",
        reply_markup=kb
    )

@router.callback_query(F.data == "policy_pdf")
async def send_policy_pdf(c: CallbackQuery):
    if not os.path.exists(POLICY_PDF):
        await c.answer("–§–∞–π–ª policy.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    await c.message.answer_document(FSInputFile(POLICY_PDF), caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (PDF)")
    await c.answer()

@router.callback_query(F.data == "consent_pdf")
async def send_consent_pdf(c: CallbackQuery):
    if not os.path.exists(CONSENT_PDF):
        await c.answer(f"–§–∞–π–ª {CONSENT_PDF} –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    await c.message.answer_document(FSInputFile(CONSENT_PDF), caption="–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è (PDF)")
    await c.answer()

@router.callback_query(F.data.in_({"agree", "disagree"}))
async def consent_handler(c: CallbackQuery):
    user = c.from_user
    action = c.data
    status = "–°–æ–≥–ª–∞—Å–µ–Ω" if action == "agree" else "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    last = read_last_status_for_user(EXCEL_FILE, user.id)
    # –ï—Å–ª–∏ —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è
    if last == "–°–æ–≥–ª–∞—Å–µ–Ω":
        await c.answer("–í–∞—à –≤—ã–±–æ—Ä —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–æ–≥–ª–∞—Å–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.", show_alert=True)
        return

    # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –æ—Ç–∫–∞–∑ ‚Äî –º–æ–∂–Ω–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
    if last == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω":
        if action == "disagree":
            await c.answer("–í–∞—à –≤—ã–±–æ—Ä —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.", show_alert=True)
            return
        # –µ—Å–ª–∏ –±—ã–ª "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω" –∏ —Å–µ–π—á–∞—Å –Ω–∞–∂–∞–ª–∏ "agree" ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º.

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Excel
    append_excel_entry(EXCEL_FILE, ts, user, status)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if status == "–°–æ–≥–ª–∞—Å–µ–Ω":
        tmp_pdf = f"confirmation_{user.id}.pdf"
        try:
            make_confirmation_pdf(tmp_pdf, user, status, ts)
            await c.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {status}")
            await c.message.answer_document(FSInputFile(tmp_pdf), caption="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (PDF)")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF")
            await c.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {status} (–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF)")
        finally:
            try:
                if os.path.exists(tmp_pdf):
                    os.remove(tmp_pdf)
            except Exception:
                pass
    else:
        await c.message.edit_text("–û—Ç–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")

    await c.answer()

@router.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ /report ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel-–æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏: –ü–æ–ª–∏—Ç–∏–∫–∞ (PDF), –°–æ–≥–ª–∞—Å–∏–µ (PDF), ‚úÖ/‚ùå"
    )

@router.message(Command("report"))
async def report_cmd(m: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if m.from_user.id != ADMIN_ID:
        await m.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if not os.path.exists(EXCEL_FILE):
        await m.reply("–û—Ç—á–µ—Ç –ø–æ–∫–∞ –ø—É—Å—Ç (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω).")
        return
    await m.reply_document(FSInputFile(EXCEL_FILE), caption="–û—Ç—á—ë—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—è–º (Excel)")

# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –≤–¥—Ä—É–≥ (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª polling)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
