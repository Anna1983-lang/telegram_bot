import logging
import os
import shutil
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiohttp import web
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w"
POLICY_PDF = "policy.pdf"
CONSENT_PDF = "consent2.pdf"
EXCEL_FILE = "consents.xlsx"
ADMIN_ID = 1227847495

# --- –®—Ä–∏—Ñ—Ç—ã –¥–ª—è PDF
pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))
pdfmetrics.registerFont(TTFont("DejaVu-Bold", "DejaVuSans-Bold.ttf"))

WEBHOOK_HOST = "https://telegram-bot-hdtw.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

router = Router()

# --- –¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è
AGREEMENT_TEXT = """
üîí –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ù–∞–∂–∏–º–∞—è ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ
–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
—Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

# --- FSM: –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û –∏ –ò–ù–ù
class ConsentStates(StatesGroup):
    waiting_fio = State()
    waiting_inn = State()

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def start_handler(m: Message):
    kb = [[
        {"text": "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "callback_data": "agree"},
        {"text": "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "callback_data": "disagree"}
    ]]
    await m.answer(AGREEMENT_TEXT, reply_markup={"inline_keyboard": kb})

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–°–æ–≥–ª–∞—Å–µ–Ω" - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –§–ò–û
@router.callback_query(F.data == "agree")
async def consent_agree_handler(c: CallbackQuery, state: FSMContext):
    await c.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    await state.set_state(ConsentStates.waiting_fio)
    await c.answer()

# --- –í–≤–æ–¥ –§–ò–û
@router.message(ConsentStates.waiting_fio)
async def get_fio(m: Message, state: FSMContext):
    fio = m.text.strip()
    await state.update_data(fio=fio)
    await m.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ò–ù–ù:")
    await state.set_state(ConsentStates.waiting_inn)

# --- –í–≤–æ–¥ –ò–ù–ù –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è (Excel, PDF, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É)
@router.message(ConsentStates.waiting_inn)
async def get_inn(m: Message, state: FSMContext, bot: Bot):
    inn = m.text.strip()
    data = await state.get_data()
    fio = data.get('fio', '')

    user = m.from_user
    status = "–°–æ–≥–ª–∞—Å–µ–Ω"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # --- –ó–∞–ø–∏—Å—å –≤ Excel (openpyxl)
    import openpyxl
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["User ID", "Username", "–ò–º—è", "–§–ò–û", "–ò–ù–ù", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è"])
    else:
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active

    ws.append([user.id, user.username, user.full_name, fio, inn, status, timestamp])
    wb.save(EXCEL_FILE)

    # --- PDF
    pdf_name = f"confirm_{user.id}_{int(datetime.now().timestamp())}.pdf"
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas

    cpdf = canvas.Canvas(pdf_name, pagesize=A4)
    cpdf.setFont("DejaVu", 12)
    cpdf.drawString(100, 800, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è")
    cpdf.drawString(100, 770, f"User ID: {user.id}")
    cpdf.drawString(100, 750, f"–ò–º—è: {user.full_name}")
    cpdf.drawString(100, 730, f"–§–ò–û: {fio}")
    cpdf.drawString(100, 710, f"–ò–ù–ù: {inn}")
    cpdf.drawString(100, 690, f"–°—Ç–∞—Ç—É—Å: {status}")
    cpdf.drawString(100, 670, f"–í—Ä–µ–º—è: {timestamp}")
    cpdf.drawString(100, 650, f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {POLICY_PDF}, {CONSENT_PDF}")
    cpdf.save()

    await m.answer_document(FSInputFile(pdf_name), caption="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ PDF")
    os.remove(pdf_name)

    await m.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.clear()

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_msg = f"{user.full_name or user.username} –≤—ã–±—Ä–∞–ª: —Å–æ–≥–ª–∞—Å–µ–Ω\n–§–ò–û: {fio}\n–ò–ù–ù: {inn}"
    await bot.send_message(ADMIN_ID, admin_msg)

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
@router.callback_query(F.data == "disagree")
async def consent_disagree_handler(c: CallbackQuery):
    user = c.from_user
    status = "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–ø–∏—Å—å –≤ Excel (–±–µ–∑ –§–ò–û –∏ –ò–ù–ù)
    import openpyxl
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["User ID", "Username", "–ò–º—è", "–§–ò–û", "–ò–ù–ù", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è"])
    else:
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active

    ws.append([user.id, user.username, user.full_name, "", "", status, timestamp])
    wb.save(EXCEL_FILE)

    await c.message.edit_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
    await c.answer()

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == "policy_pdf")
async def send_policy(c: CallbackQuery):
    await c.message.answer_document(FSInputFile(POLICY_PDF), caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")

@router.callback_query(F.data == "consent_pdf")
async def send_consent(c: CallbackQuery):
    await c.message.answer_document(FSInputFile(CONSENT_PDF), caption="–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è")

# --- –û—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
@router.message(Command("report"))
async def report(m: Message):
    if m.from_user.id != ADMIN_ID:
        await m.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not os.path.exists(EXCEL_FILE):
        await m.answer("–§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    temp_name = f"consents_{ts}.xlsx"
    shutil.copy(EXCEL_FILE, temp_name)
    await m.answer_document(FSInputFile(temp_name), caption="üìä –û—Ç—á—ë—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—è–º")
    os.remove(temp_name)

# --- Webhook –∑–∞–ø—É—Å–∫
async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

async def main():
    import asyncio
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    app = web.Application()
    app["bot"] = bot
    app.router.add_post(WEBHOOK_PATH, dp.webhook_handler)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()

    await on_startup(bot)
    logging.info(f"Webhook –∑–∞–ø—É—â–µ–Ω: {WEBHOOK_URL}")

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
