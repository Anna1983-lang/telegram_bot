# main.py
import asyncio
import os
import logging
from datetime import datetime
from textwrap import wrap
from typing import List, Optional, Tuple

from aiohttp import web, ClientSession

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, Update

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- ENV / SETTINGS ----------
TOKEN = os.environ.get("TELEGRAM_TOKEN", "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w")

# –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (ENV: ADMIN_IDS="1227847495,5791748471")
ADMIN_IDS = {
    int(x) for x in os.environ.get("ADMIN_IDS", "1227847495,5791748471").replace(" ", "").split(",") if x
}

WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä.: https://...onrender.com/webhook/8475192387
BOT_ID_PREFIX = TOKEN.split(":")[0]
WEBHOOK_PATH = f"/webhook/{BOT_ID_PREFIX}"

POLICY_PDF = "policy.pdf"
CONSENT_PDF = "consent2.pdf"
EXCEL_FILE = "consents.xlsx"

# —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ PDF
PDF_FONT_REGULAR_PATH = os.environ.get("PDF_FONT_REGULAR", "fonts/DejaVuSans.ttf")
PDF_FONT_BOLD_PATH    = os.environ.get("PDF_FONT_BOLD",    "fonts/DejaVuSans-Bold.ttf")
PDF_FONT_REGULAR_NAME = "DejaVuSans"
PDF_FONT_BOLD_NAME    = "DejaVuSans-Bold"

# ---------- aiogram v3 ----------
router = Router()
dp = Dispatcher()
dp.include_router(router)
bot = Bot(TOKEN)

# ---------- Excel —É—Ç–∏–ª–∏—Ç—ã ----------
def init_excel_if_needed(path: str):
    if os.path.exists(path):
        return
    wb = Workbook()
    ws = wb.active
    ws.title = "Consents"
    ws.append(["Timestamp", "User ID", "Username", "First name", "Last name", "Status"])
    widths = [20, 15, 25, 20, 20, 15]
    for i, w in enumerate(widths, start=1):
        ws.column_dimensions[get_column_letter(i)].width = w
    wb.save(path)

def read_all_rows(path: str):
    if not os.path.exists(path):
        return []
    wb = load_workbook(path, read_only=True)
    ws = wb.active
    rows = []
    for i, row in enumerate(ws.iter_rows(values_only=True)):
        if i == 0:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        rows.append(row)  # (ts, user_id, username, first_name, last_name, status)
    return rows

def read_last_status_for_user(path: str, user_id: int) -> Optional[str]:
    last = None
    for row in read_all_rows(path):
        try:
            uid = int(row[1])
        except Exception:
            continue
        if uid == user_id:
            last = row[5]
    return last

def append_excel_entry(path: str, ts: str, user, status: str):
    init_excel_if_needed(path)
    wb = load_workbook(path)
    ws = wb.active
    ws.append([ts, user.id, user.username or "", user.first_name or "", user.last_name or "", status])
    wb.save(path)

def rewrite_excel(path: str, rows: List[tuple]):
    wb = Workbook()
    ws = wb.active
    ws.title = "Consents"
    ws.append(["Timestamp", "User ID", "Username", "First name", "Last name", "Status"])
    widths = [20, 15, 25, 20, 20, 15]
    for i, w in enumerate(widths, start=1):
        ws.column_dimensions[get_column_letter(i)].width = w
    for r in rows:
        ws.append(list(r))
    wb.save(path)

def filter_rows_by_period(rows: List[tuple], start: Optional[datetime], end: Optional[datetime]) -> List[tuple]:
    if not start and not end:
        return rows
    out = []
    for r in rows:
        try:
            ts = datetime.strptime(str(r[0]), "%Y-%m-%d %H:%M:%S")
        except Exception:
            try:
                ts = datetime.fromisoformat(str(r[0]))
            except Exception:
                continue
        if start and ts < start:
            continue
        if end and ts > end:
            continue
        out.append(r)
    return out

def parse_period(text_after_command: str) -> Tuple[Optional[datetime], Optional[datetime]]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      ''                              -> –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
      '2025-08-25'                    -> –∑–∞ –¥–µ–Ω—å
      '2025-08-01 00:00 2025-08-31 23:59' -> –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    """
    s = text_after_command.strip()
    if not s:
        return None, None
    parts = s.split()
    fmt_date = "%Y-%m-%d"
    fmt_dt = "%Y-%m-%d %H:%M"
    try:
        if len(parts) == 1:
            start = datetime.strptime(parts[0], fmt_date)
            end = datetime.strptime(parts[0], fmt_date).replace(hour=23, minute=59, second=59)
            return start, end
        elif len(parts) >= 2:
            try:
                start = datetime.strptime(" ".join(parts[0:2]), fmt_dt)
                if len(parts) >= 4:
                    end = datetime.strptime(" ".join(parts[2:4]), fmt_dt)
                else:
                    end = None
            except ValueError:
                start = datetime.strptime(parts[0], fmt_date)
                end = datetime.strptime(parts[1], fmt_date).replace(hour=23, minute=59, second=59)
            return start, end
    except Exception:
        return None, None

# ---------- PDF (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞) ----------
def _register_pdf_fonts():
    registered = set(pdfmetrics.getRegisteredFontNames())
    try:
        if PDF_FONT_REGULAR_NAME not in registered and os.path.exists(PDF_FONT_REGULAR_PATH):
            pdfmetrics.registerFont(TTFont(PDF_FONT_REGULAR_NAME, PDF_FONT_REGULAR_PATH))
        if PDF_FONT_BOLD_NAME not in registered and os.path.exists(PDF_FONT_BOLD_PATH):
            pdfmetrics.registerFont(TTFont(PDF_FONT_BOLD_NAME, PDF_FONT_BOLD_PATH))
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å TTF-—à—Ä–∏—Ñ—Ç—ã –¥–ª—è PDF")

def make_confirmation_pdf(filename: str, user, status: str, ts: str) -> str:
    _register_pdf_fonts()

    c = canvas.Canvas(filename, pagesize=A4)
    width, height = A4
    y = height - 40
    try:
        c.setFont(PDF_FONT_BOLD_NAME, 14)
    except Exception:
        c.setFont("Helvetica-Bold", 14)
    c.drawString(40, y, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω")
    y -= 26
    try:
        c.setFont(PDF_FONT_REGULAR_NAME, 11)
    except Exception:
        c.setFont("Helvetica", 11)
    header = [
        f"–í—ã–±–æ—Ä: {status}",
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ts}",
        f"Telegram: @{user.username}" if user.username else f"Telegram user_id: {user.id}",
        f"–§–ò–û: {(user.first_name or '')} {(user.last_name or '')}".strip(),
        f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {POLICY_PDF} / {CONSENT_PDF}"
    ]
    for hl in header:
        for line in wrap(hl, 100):
            c.drawString(40, y, line)
            y -= 16
    y -= 8
    body = ("–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ–ª–µ–∏–∑—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ. "
            "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤ PDF.")
    for line in wrap(body, 100):
        if y < 60:
            c.showPage()
            try:
                c.setFont(PDF_FONT_REGULAR_NAME, 11)
            except Exception:
                c.setFont("Helvetica", 11)
            y = height - 40
        c.drawString(40, y, line)
        y -= 16
    c.save()
    return filename

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------
@router.message(CommandStart())
async def start(m: Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ (PDF)", callback_data="policy_pdf"),
         types.InlineKeyboardButton(text="üìù –°–æ–≥–ª–∞—Å–∏–µ (PDF)", callback_data="consent_pdf")],
        [types.InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
         types.InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree")]
    ])
    await m.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (PDF), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω¬ª –∏–ª–∏ ¬´‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª.", reply_markup=kb)

@router.message(Command("id"))
async def whoami(m: Message):
    await m.answer(f"–í–∞—à ID: {m.from_user.id}")

@router.message(Command("ping"))
async def ping(m: Message):
    await m.answer("pong")

@router.callback_query(F.data == "policy_pdf")
async def send_policy_pdf(c: CallbackQuery):
    if not os.path.exists(POLICY_PDF):
        await c.answer("–§–∞–π–ª policy.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await c.message.answer_document(FSInputFile(POLICY_PDF), caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (PDF)")
    await c.answer()

@router.callback_query(F.data == "consent_pdf")
async def send_consent_pdf(c: CallbackQuery):
    if not os.path.exists(CONSENT_PDF):
        await c.answer(f"–§–∞–π–ª {CONSENT_PDF} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await c.message.answer_document(FSInputFile(CONSENT_PDF), caption="–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è (PDF)")
    await c.answer()

@router.callback_query(F.data.in_({"agree", "disagree"}))
async def consent_handler(c: CallbackQuery):
    user = c.from_user
    action = c.data
    status = "–°–æ–≥–ª–∞—Å–µ–Ω" if action == "agree" else "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    last = read_last_status_for_user(EXCEL_FILE, user.id)
    if last == "–°–æ–≥–ª–∞—Å–µ–Ω":
        await c.answer("–í–∞—à –≤—ã–±–æ—Ä —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–æ–≥–ª–∞—Å–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.", show_alert=True)
        return
    if last == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω" and action == "disagree":
        await c.answer("–í–∞—à –≤—ã–±–æ—Ä —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.", show_alert=True)
        return

    append_excel_entry(EXCEL_FILE, ts, user, status)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    text = (f"üÜï –ù–æ–≤—ã–π –≤—ã–±–æ—Ä –ø–æ —Å–æ–≥–ª–∞—Å–∏—é\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è: {ts}\n"
            f"User: {user.id} @{user.username or '‚Äî'} {user.first_name or ''} {user.last_name or ''}".strip())
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É %s", admin_id)

    if status == "–°–æ–≥–ª–∞—Å–µ–Ω":
        tmp_pdf = f"confirmation_{user.id}.pdf"
        try:
            make_confirmation_pdf(tmp_pdf, user, status, ts)
            await c.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {status}")
            await c.message.answer_document(FSInputFile(tmp_pdf), caption="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (PDF)")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF")
            await c.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {status} (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF).")
        finally:
            try:
                if os.path.exists(tmp_pdf):
                    os.remove(tmp_pdf)
            except Exception:
                pass
    else:
        await c.message.edit_text("–û—Ç–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    await c.answer()

@router.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start\n"
        "‚Ä¢ /id\n"
        "‚Ä¢ /ping\n"
        "‚Ä¢ /report [YYYY-MM-DD] | [YYYY-MM-DD HH:MM YYYY-MM-DD HH:MM]\n"
        "‚Ä¢ /clear_all ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /clear_user <user_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"
    )

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@router.message(Command("report"))
async def report_cmd(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if not os.path.exists(EXCEL_FILE):
        await m.answer("–û—Ç—á—ë—Ç –ø–æ–∫–∞ –ø—É—Å—Ç (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω).")
        return

    text_after = m.text.split(" ", 1)[1] if " " in m.text else ""
    start, end = parse_period(text_after)

    rows = read_all_rows(EXCEL_FILE)
    rows = filter_rows_by_period(rows, start, end)

    if not rows:
        await m.answer("–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        return

    try:
        tmp = "report_filtered.xlsx"
        rewrite_excel(tmp, rows)
        caption = "–û—Ç—á—ë—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—è–º"
        if start or end:
            caption += f" (—Ñ–∏–ª—å—Ç—Ä: {start or '‚Ä¶'} ‚Äî {end or '‚Ä¶'})"
        await m.answer_document(FSInputFile(tmp), caption=caption)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel")
        await m.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    finally:
        try:
            if os.path.exists(tmp):
                os.remove(tmp)
        except Exception:
            pass

@router.message(Command("clear_all"))
async def clear_all_cmd(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    rewrite_excel(EXCEL_FILE, [])
    await m.answer("–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã.")

@router.message(Command("clear_user"))
async def clear_user_cmd(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    parts = m.text.strip().split()
    if len(parts) < 2 or not parts[1].isdigit():
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clear_user <user_id>")
        return
    target = int(parts[1])
    rows = read_all_rows(EXCEL_FILE)
    new_rows = [r for r in rows if int(r[1]) != target]
    rewrite_excel(EXCEL_FILE, new_rows)
    await m.answer(f"–ó–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} —É–¥–∞–ª–µ–Ω—ã ({len(rows) - len(new_rows)} —à—Ç.).")

# ---------- Webhook / —Å–µ—Ä–≤–µ—Ä ----------
async def on_startup(_app: web.Application):
    if not WEBHOOK_URL:
        logger.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω (ENV).")
        return
    try:
        me = await bot.get_me()
        logger.info("Bot @%s (id=%s). ADMIN_IDS=%s", me.username, me.id, ADMIN_IDS)
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

    # —Ñ–æ–Ω–æ–≤–∞—è –±—É–¥–∏–ª–∫–∞ self-ping /healthz –∫–∞–∂–¥—ã–µ ~4 –º–∏–Ω
    try:
        asyncio.create_task(_keepalive_task())
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å keepalive")

async def on_shutdown(_app: web.Application):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª—ë–Ω")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook")
    try:
        await bot.session.close()
    except Exception:
        pass

async def _keepalive_task():
    if not WEBHOOK_URL:
        return
    base = WEBHOOK_URL.split("/webhook")[0]
    url = base + "/healthz"
    while True:
        try:
            async with ClientSession() as s:
                async with s.get(url, timeout=5) as r:
                    await r.text()
        except Exception:
            pass
        await asyncio.sleep(240)

async def handle(request: web.Request):
    # –ü–æ–ª—É—á–∞–µ–º JSON –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä (aiogram 3)
    try:
        data = await request.json()
    except Exception:
        return web.Response(status=400, text="no json")
    try:
        update = Update.model_validate(data)  # pydantic v2
        asyncio.create_task(dp.feed_update(bot, update))  # –Ω–µ –∂–¥—ë–º ‚Äî —Å—Ä–∞–∑—É 200 OK
        return web.Response(text="ok")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
        return web.Response(status=500, text="error")

async def root(_request: web.Request):
    return web.Response(text="ok")

async def healthz(_request: web.Request):
    return web.Response(text="ok")

def create_app():
    app = web.Application()
    app.router.add_get("/", root)
    app.router.add_get("/healthz", healthz)
    app.router.add_post(WEBHOOK_PATH, handle)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_shutdown)
    return app

if __name__ == "__main__":
    if not WEBHOOK_URL:
        logger.error("ERROR: WEBHOOK_URL not set.")
        raise SystemExit(1)
    app = create_app()
    port = int(os.environ.get("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)
