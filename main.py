import logging
import os
import shutil
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiohttp import web
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

import openpyxl

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w"
POLICY_PDF = "policy.pdf"
CONSENT_PDF = "consent2.pdf"
OFFER_PDF = "–ü–£–ë–õ–ò–ß–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï (–û–§–ï–†–¢–ê).pdf"
EXCEL_FILE = "consents.xlsx"
ADMIN_ID = 1227847495

# --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è PDF
pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))
pdfmetrics.registerFont(TTFont("DejaVu-Bold", "DejaVuSans-Bold.ttf"))

# FSM –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è (—Å–±–æ—Ä –§–ò–û –∏ –ò–ù–ù)
class ConsentForm(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_inn = State()

# FSM-—Å—Ç–æ—Ä–∞–¥–∂
storage = MemoryStorage()
router = Router()

# --- –¢–ï–ö–°–¢–´
AGREEMENT_TEXT = (
    "üîí –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
    "–ù–∞–∂–∏–º–∞—è ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
)

# --- –°–¢–ê–†–¢
@router.message(CommandStart())
async def start_handler(m: Message, state: FSMContext):
    kb = [
        [{"text": "üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞", "callback_data": "policy_pdf"},
         {"text": "üìù –°–æ–≥–ª–∞—Å–∏–µ", "callback_data": "consent_pdf"},
         {"text": "üìë –û—Ñ–µ—Ä—Ç–∞", "callback_data": "offer_pdf"}],
        [{"text": "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "callback_data": "agree"},
         {"text": "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "callback_data": "disagree"}]
    ]
    await m.answer(AGREEMENT_TEXT, reply_markup={"inline_keyboard": kb})
    await state.clear()

# --- –û–¢–ü–†–ê–í–ö–ê PDF
@router.callback_query(F.data == "policy_pdf")
async def send_policy(c: CallbackQuery):
    await c.message.answer_document(FSInputFile(POLICY_PDF), caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    await c.answer()

@router.callback_query(F.data == "consent_pdf")
async def send_consent(c: CallbackQuery):
    await c.message.answer_document(FSInputFile(CONSENT_PDF), caption="–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è")
    await c.answer()

@router.callback_query(F.data == "offer_pdf")
async def send_offer(c: CallbackQuery):
    await c.message.answer_document(FSInputFile(OFFER_PDF), caption="–ü—É–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–û–§–ï–†–¢–ê)")
    await c.answer()

# --- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ì–õ–ê–°–ò–Ø
@router.callback_query(F.data == "agree")
async def consent_agree(c: CallbackQuery, state: FSMContext):
    await state.set_state(ConsentForm.waiting_for_fullname)
    await c.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
    await c.answer()

@router.message(ConsentForm.waiting_for_fullname)
async def get_fullname(m: Message, state: FSMContext):
    await state.update_data(fullname=m.text)
    await state.set_state(ConsentForm.waiting_for_inn)
    await m.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù:")

@router.message(ConsentForm.waiting_for_inn)
async def get_inn(m: Message, state: FSMContext):
    data = await state.get_data()
    fullname = data["fullname"]
    inn = m.text.strip()
    user = m.from_user
    status = "–°–æ–≥–ª–∞—Å–µ–Ω"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Excel –ª–æ–≥
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["User ID", "Username", "–§–ò–û", "–ò–ù–ù", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è"])
    else:
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active
    ws.append([user.id, user.username or "", fullname, inn, status, timestamp])
    wb.save(EXCEL_FILE)

    # PDF-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    pdf_name = f"confirm_{user.id}_{int(datetime.now().timestamp())}.pdf"
    cpdf = canvas.Canvas(pdf_name, pagesize=A4)
    cpdf.setFont("DejaVu", 12)
    cpdf.drawString(100, 800, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è")
    cpdf.drawString(100, 770, f"User ID: {user.id}")
    cpdf.drawString(100, 750, f"–ò–º—è: {fullname}")
    cpdf.drawString(100, 730, f"–ò–ù–ù: {inn}")
    cpdf.drawString(100, 710, f"–°—Ç–∞—Ç—É—Å: {status}")
    cpdf.drawString(100, 690, f"–í—Ä–µ–º—è: {timestamp}")
    cpdf.drawString(100, 670, f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {POLICY_PDF}, {CONSENT_PDF}, {OFFER_PDF}")
    cpdf.save()

    await m.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–æ–≥–ª–∞—Å–µ–Ω")
    await m.answer_document(FSInputFile(pdf_name), caption="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (PDF)")
    os.remove(pdf_name)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    try:
        admin_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name or user.username or user.id} –≤—ã–±—Ä–∞–ª: —Å–æ–≥–ª–∞—Å–µ–Ω\n"
            f"–§–ò–û: {fullname}\n–ò–ù–ù: {inn}\n–í—Ä–µ–º—è: {timestamp}"
        )
        bot = m.bot
        await bot.send_message(ADMIN_ID, admin_text)
    except Exception:
        pass

    await state.clear()

@router.callback_query(F.data == "disagree")
async def consent_disagree(c: CallbackQuery):
    await c.message.edit_text("–û—Ç–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    await c.answer()

# --- –û–¢–ß–Å–¢ –î–õ–Ø –ê–î–ú–ò–ù–ê
@router.message(Command("report"))
async def report(m: Message):
    if m.from_user.id != ADMIN_ID:
        await m.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not os.path.exists(EXCEL_FILE):
        await m.answer("–§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    temp_name = f"consents_{ts}.xlsx"
    shutil.copy(EXCEL_FILE, temp_name)
    await m.answer_document(FSInputFile(temp_name), caption="üìä –û—Ç—á—ë—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—è–º")
    os.remove(temp_name)

# --- –ó–ê–ü–£–°–ö –î–õ–Ø RENDER / RAILWAY ---
TOKEN = TOKEN
WEBHOOK_HOST = os.environ.get("WEBHOOK_HOST", "")  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

async def main():
    bot = Bot(TOKEN)
    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    # –î–ª—è webhook (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ dp.start_polling(bot))
    app = web.Application()
    app["bot"] = bot
    app.router.add_post(WEBHOOK_PATH, dp.webhook_handler)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
    print(f"=== Webhook –∑–∞–ø—É—â–µ–Ω: {WEBHOOK_URL} ===")

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
