import asyncio
import logging
import os
import time
import shutil
from datetime import datetime
from textwrap import wrap

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile

from aiohttp import web

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter

logging.basicConfig(level=logging.INFO)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
# –¢–≤–æ–π —Ç–æ–∫–µ–Ω (–≤—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∞)
TOKEN = "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w"

# –ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–æ–ª–æ–∂–∏ —Ä—è–¥–æ–º —Å main.py)
POLICY_PDF = "policy.pdf"
CONSENT_PDF = "consent2.pdf"  # –µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π ‚Äî –∑–∞–º–µ–Ω–∏ –∑–¥–µ—Å—å
EXCEL_FILE = "consents.xlsx"

# –ê–¥–º–∏–Ω (—Ç–æ—Ç, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç /report –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
ADMIN_ID = 1227847495

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å DejaVu –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ PDF, –±–µ–∑ —Ñ–∞—Ç–∞–ª–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤
try:
    pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))
    pdfmetrics.registerFont(TTFont("DejaVu-Bold", "DejaVuSans-Bold.ttf"))
    DEFAULT_FONT = "DejaVu"
    DEFAULT_BOLD = "DejaVu-Bold"
except Exception:
    DEFAULT_FONT = "Helvetica"
    DEFAULT_BOLD = "Helvetica-Bold"

router = Router()

# ========== EXCEL HELPERS ==========
def init_excel_if_needed(path: str):
    if os.path.exists(path):
        return
    wb = Workbook()
    ws = wb.active
    ws.title = "Consents"
    ws.append(["Timestamp", "User ID", "Username", "First name", "Last name", "Status"])
    widths = [20, 15, 25, 20, 20, 15]
    for i, w in enumerate(widths, start=1):
        ws.column_dimensions[get_column_letter(i)].width = w
    wb.save(path)

def append_excel_entry(path: str, ts: str, user, status: str):
    init_excel_if_needed(path)
    wb = load_workbook(path)
    ws = wb.active
    ws.append([
        ts,
        user.id,
        user.username or "",
        user.first_name or "",
        user.last_name or "",
        status
    ])
    wb.save(path)

def get_user_status(path: str, user_id: int):
    if not os.path.exists(path):
        return None
    wb = load_workbook(path)
    ws = wb.active
    # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
    for row in reversed(list(ws.iter_rows(min_row=2, values_only=True))):
        if row[1] == user_id:
            return row[5]  # —Å—Ç–∞—Ç—É—Å
    return None

# ========== PDF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ==========
def make_confirmation_pdf(filename: str, user, status: str, ts: str) -> str:
    c = canvas.Canvas(filename, pagesize=A4)
    width, height = A4
    y = height - 40

    c.setFont(DEFAULT_BOLD, 14)
    c.drawString(40, y, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω")
    y -= 30

    c.setFont(DEFAULT_FONT, 11)
    header = [
        f"–í—ã–±–æ—Ä: {status}",
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ts}",
        f"Telegram: @{user.username}" if user.username else f"Telegram user_id: {user.id}",
        f"–§–ò–û: {(user.first_name or '')} {(user.last_name or '')}".strip(),
        f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {POLICY_PDF} / {CONSENT_PDF}"
    ]
    for hl in header:
        for line in wrap(hl, 95):
            c.drawString(40, y, line)
            y -= 18
    y -= 8

    body = ("–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ–ª–µ–∏–∑—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ "
            f"–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤ PDF ({POLICY_PDF}, {CONSENT_PDF}) "
            "–¥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è/–æ—Ç–∫–∞–∑–∞.")
    for line in wrap(body, 95):
        if y < 60:
            c.showPage()
            y = height - 40
            c.setFont(DEFAULT_FONT, 11)
        c.drawString(40, y, line)
        y -= 18

    c.save()
    return filename

# ========== UI / –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ==========
def start_keyboard():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ (PDF)", callback_data="policy_pdf"),
            types.InlineKeyboardButton(text="üìù –°–æ–≥–ª–∞—Å–∏–µ (PDF)", callback_data="consent_pdf"),
        ],
        [
            types.InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree"),
        ],
    ])

# ========== –•–≠–ù–î–õ–ï–†–´ ==========
@router.message(CommandStart())
async def start(m: Message):
    await m.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (PDF), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω¬ª –∏–ª–∏ ¬´‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª.",
        reply_markup=start_keyboard()
    )

@router.message(Command("ping"))
async def ping(m: Message):
    await m.answer("pong ‚úÖ")

@router.callback_query(F.data == "policy_pdf")
async def send_policy_pdf(c: CallbackQuery):
    if not os.path.exists(POLICY_PDF):
        await c.answer("–§–∞–π–ª policy.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    f = FSInputFile(POLICY_PDF, filename=f"policy_{int(time.time())}.pdf")
    await c.message.answer_document(f, caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (PDF)")
    await c.answer()

@router.callback_query(F.data == "consent_pdf")
async def send_consent_pdf(c: CallbackQuery):
    if not os.path.exists(CONSENT_PDF):
        await c.answer(f"–§–∞–π–ª {CONSENT_PDF} –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    f = FSInputFile(CONSENT_PDF, filename=f"consent_{int(time.time())}.pdf")
    await c.message.answer_document(f, caption="–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è (PDF)")
    await c.answer()

@router.callback_query(F.data.in_({"agree", "disagree"}))
async def consent_handler(c: CallbackQuery):
    user = c.from_user
    status = "–°–æ–≥–ª–∞—Å–µ–Ω" if c.data == "agree" else "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    existing_status = get_user_status(EXCEL_FILE, user.id)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
    # - –µ—Å–ª–∏ —É–∂–µ –°–æ–≥–ª–∞—Å–µ–Ω ‚Äî –º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è
    # - –µ—Å–ª–∏ –æ—Ç–∫–∞–∑–∞–ª—Å—è ‚Äî –º–æ–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑
    if existing_status == "–°–æ–≥–ª–∞—Å–µ–Ω":
        await c.answer("–í–∞—à –≤—ã–±–æ—Ä —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–æ–≥–ª–∞—Å–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.", show_alert=True)
        return
    if existing_status == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω" and status == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω":
        await c.answer("–í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ. –û—Ç–≤–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        return

    # –ó–∞–ø–∏—Å—å –≤ Excel
    append_excel_entry(EXCEL_FILE, ts, user, status)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        text = (f"–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç!\n"
                f"ID: {user.id}\n"
                f"–ò–º—è: {(user.first_name or '')} {(user.last_name or '')}\n"
                f"Username: @{user.username}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–í—Ä–µ–º—è: {ts}")
        await c.bot.send_message(ADMIN_ID, text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ PDF (–ø—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏)
    if status == "–°–æ–≥–ª–∞—Å–µ–Ω":
        pdf_name = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ_{user.id}.pdf"
        make_confirmation_pdf(pdf_name, user, status, ts)
        await c.message.edit_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–æ–≥–ª–∞—Å–µ–Ω")
        await c.message.answer_document(FSInputFile(pdf_name, filename=f"confirm_{int(time.time())}.pdf"),
                                        caption="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (PDF)")
        try:
            os.remove(pdf_name)
        except Exception:
            pass
    else:
        await c.message.edit_text("–û—Ç–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑.")

    await c.answer()

@router.message(Command("report"))
async def send_report(m: Message):
    if m.from_user.id != ADMIN_ID:
        await m.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    if not os.path.exists(EXCEL_FILE):
        await m.answer("–§–∞–π–ª consents.xlsx –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    temp_name = f"consents_{ts}.xlsx"
    shutil.copy(EXCEL_FILE, temp_name)
    await m.answer_document(FSInputFile(temp_name), caption="üìä –û—Ç—á—ë—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—è–º")
    try:
        os.remove(temp_name)
    except Exception:
        pass

@router.message(Command("help"))
async def help_cmd(m: Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç –∂–∏–≤\n"
        "‚Ä¢ /report ‚Äî –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç consents.xlsx\n"
        "‚Ä¢ üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ / üìù –°–æ–≥–ª–∞—Å–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF\n"
    )

@router.message()
async def any_message(m: Message):
    await m.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.",
        reply_markup=start_keyboard()
    )

# ========== HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã Web Service –Ω–µ "—Ä—É–±–∏–ª" –ø—Ä–æ—Ü–µ—Å—Å) ==========
async def health(request):
    return web.Response(text="ok")

async def run_http_server():
    app = web.Application()
    app.router.add_get("/", health)
    app.router.add_get("/health", health)

    port = int(os.getenv("PORT", "10000"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()

    # –¥–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∂–∏–≤—ã–º
    await asyncio.Event().wait()

# ========== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==========
async def run_bot():
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

async def main():
    # –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        run_http_server(),
        run_bot(),
    )

if __name__ == "__main__":
    asyncio.run(main())
