import os
import time
import shutil
import logging
from datetime import datetime
from textwrap import wrap

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile

from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter

logging.basicConfig(level=logging.INFO)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN", "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w")

POLICY_PDF  = "policy.pdf"
CONSENT_PDF = "consent2.pdf"     # <- —Ç—ã –ø—Ä–æ—Å–∏–ª–∞ —Ç—É—Ç –Ω–æ–≤–æ–µ –∏–º—è
EXCEL_FILE  = "consents.xlsx"

ADMIN_ID = 1227847495

# Render –æ—Ç–¥–∞—ë—Ç –≤–Ω–µ—à–Ω–∏–π —É—Ä–ª –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
BASE_WEB_URL = os.getenv("RENDER_EXTERNAL_URL", "https://telegram-bot-hdtw.onrender.com")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL  = f"{BASE_WEB_URL}{WEBHOOK_PATH}"

# —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ PDF (—Ñ–∞–π–ª—ã .ttf –ª–µ–∂–∞—Ç —Ä—è–¥–æ–º)
pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))
pdfmetrics.registerFont(TTFont("DejaVu-Bold", "DejaVuSans-Bold.ttf"))

router = Router()

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: Excel ===
def init_excel_if_needed(path: str):
    if os.path.exists(path):
        return
    wb = Workbook()
    ws = wb.active
    ws.title = "Consents"
    ws.append(["Timestamp", "User ID", "Username", "First name", "Last name", "Status"])
    for i, w in enumerate([20, 15, 25, 20, 20, 15], start=1):
        ws.column_dimensions[get_column_letter(i)].width = w
    wb.save(path)

def append_excel_entry(path: str, ts: str, user, status: str):
    init_excel_if_needed(path)
    wb = load_workbook(path)
    ws = wb.active
    ws.append([
        ts,
        user.id,
        user.username or "",
        user.first_name or "",
        user.last_name or "",
        status
    ])
    wb.save(path)

def get_user_status(path: str, user_id: int):
    if not os.path.exists(path):
        return None
    wb = load_workbook(path)
    ws = wb.active
    for row in ws.iter_rows(min_row=2, values_only=True):
        if row[1] == user_id:
            return row[5]
    return None

# === PDF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
def make_confirmation_pdf(filename: str, user, status: str, ts: str) -> str:
    c = canvas.Canvas(filename, pagesize=A4)
    width, height = A4
    y = height - 40

    c.setFont("DejaVu-Bold", 14)
    c.drawString(40, y, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω")
    y -= 30

    c.setFont("DejaVu", 11)
    header = [
        f"–í—ã–±–æ—Ä: {status}",
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ts}",
        f"Telegram: @{user.username}" if user.username else f"Telegram user_id: {user.id}",
        f"–§–ò–û: {(user.first_name or '')} {(user.last_name or '')}".strip(),
        f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {POLICY_PDF} / {CONSENT_PDF}",
    ]
    for hl in header:
        for line in wrap(hl, 95):
            c.drawString(40, y, line)
            y -= 18
    y -= 10

    body = ("–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ–ª–µ–∏–∑—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ "
            f"–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤ PDF ({POLICY_PDF}, {CONSENT_PDF}) "
            "–¥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è/–æ—Ç–∫–∞–∑–∞.")
    for line in wrap(body, 95):
        if y < 60:
            c.showPage()
            y = height - 40
            c.setFont("DejaVu", 11)
        c.drawString(40, y, line)
        y -= 18

    c.save()
    return filename

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def start_keyboard():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ (PDF)", callback_data="policy_pdf"),
            types.InlineKeyboardButton(text="üìù –°–æ–≥–ª–∞—Å–∏–µ (PDF)", callback_data="consent_pdf"),
        ],
        [
            types.InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree"),
        ],
    ])

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@router.message(CommandStart())
async def start(m: Message):
    await m.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (PDF), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω¬ª –∏–ª–∏ ¬´‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª.",
        reply_markup=start_keyboard()
    )

@router.message(Command("ping"))
async def ping(m: Message):
    await m.answer("pong ‚úÖ")

@router.callback_query(F.data == "policy_pdf")
async def send_policy_pdf(c: CallbackQuery):
    if not os.path.exists(POLICY_PDF):
        await c.answer("–§–∞–π–ª policy.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    # –∞–Ω—Ç–∏-–∫—ç—à: –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    f = FSInputFile(POLICY_PDF, filename=f"policy_{int(time.time())}.pdf")
    await c.message.answer_document(f, caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (PDF)")
    await c.answer()

@router.callback_query(F.data == "consent_pdf")
async def send_consent_pdf(c: CallbackQuery):
    if not os.path.exists(CONSENT_PDF):
        await c.answer("–§–∞–π–ª consent2.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    f = FSInputFile(CONSENT_PDF, filename=f"consent_{int(time.time())}.pdf")
    await c.message.answer_document(f, caption="–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è (PDF)")
    await c.answer()

@router.callback_query(F.data.in_({"agree", "disagree"}))
async def consent_handler(c: CallbackQuery):
    user = c.from_user
    status = "–°–æ–≥–ª–∞—Å–µ–Ω" if c.data == "agree" else "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    existing = get_user_status(EXCEL_FILE, user.id)
    if existing == "–°–æ–≥–ª–∞—Å–µ–Ω":
        await c.answer("–í–∞—à –≤—ã–±–æ—Ä —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–æ–≥–ª–∞—Å–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.", show_alert=True)
        return
    if existing == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω" and status == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω":
        await c.answer("–í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ. –û—Ç–≤–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        return

    append_excel_entry(EXCEL_FILE, ts, user, status)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        text = (f"–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç!\n"
                f"ID: {user.id}\n"
                f"–ò–º—è: {(user.first_name or '')} {(user.last_name or '')}\n"
                f"Username: @{user.username}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–í—Ä–µ–º—è: {ts}")
        await c.bot.send_message(ADMIN_ID, text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

    if status == "–°–æ–≥–ª–∞—Å–µ–Ω":
        pdf_name = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ_{user.id}.pdf"
        make_confirmation_pdf(pdf_name, user, status, ts)
        await c.message.edit_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: –°–æ–≥–ª–∞—Å–µ–Ω")
        await c.message.answer_document(
            FSInputFile(pdf_name, filename=f"confirm_{int(time.time())}.pdf"),
            caption="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (PDF)"
        )
        try: os.remove(pdf_name)
        except: pass
    else:
        await c.message.edit_text("–û—Ç–∫–∞–∑ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî —Å–º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑.")

    await c.answer()

@router.message(Command("report"))
async def send_report(m: Message):
    if m.from_user.id != ADMIN_ID:
        await m.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not os.path.exists(EXCEL_FILE):
        await m.answer("–§–∞–π–ª consents.xlsx –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    tmp = f"consents_{ts}.xlsx"
    shutil.copy(EXCEL_FILE, tmp)           # –∞–Ω—Ç–∏-–∫—ç—à –¥–ª—è Telegram
    await m.answer_document(FSInputFile(tmp), caption="üìä –û—Ç—á—ë—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—è–º")
    try: os.remove(tmp)
    except: pass

@router.message()
async def any_message(m: Message):
    await m.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start.", reply_markup=start_keyboard())

# === WEBHOOK-–∑–∞–ø—É—Å–∫ (aiogram v3) ===
async def app_factory() -> web.Application:
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    app = web.Application()

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç aiogram (v3)
    SimpleRequestHandler(dp, bot).register(app, path=WEBHOOK_PATH)

    # —Å—Ç–∞—Ä—Ç–∞–ø/—à—É—Ç–¥–∞—É–Ω: —Å—Ç–∞–≤–∏–º/—É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    async def on_startup(app_: web.Application):
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"Webhook set to: {WEBHOOK_URL}")

    async def on_shutdown(app_: web.Application):
        await bot.delete_webhook()

    setup_application(app, on_startup=on_startup, on_shutdown=on_shutdown)
    return app

if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    web.run_app(app_factory(), host="0.0.0.0", port=port)
