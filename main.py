import logging
import os
import shutil
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiohttp import web
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w"
POLICY_PDF = "policy.pdf"
CONSENT_PDF = "consent2.pdf"
OFFER_PDF = "–ü–£–ë–õ–ò–ß–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï (–û–§–ï–†–¢–ê).pdf"
EXCEL_FILE = "consents.xlsx"
ADMINS = [1227847495, 5791748471]  # <-- —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

WEBHOOK_HOST = "https://web-production-4d0f4.up.railway.app"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

logging.basicConfig(level=logging.INFO)

pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))
pdfmetrics.registerFont(TTFont("DejaVu-Bold", "DejaVuSans-Bold.ttf"))

router = Router()

AGREEMENT_TEXT = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (PDF), –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
)

class ConsentStates(StatesGroup):
    waiting_fio = State()
    waiting_inn = State()

@router.message(CommandStart())
async def start_handler(m: Message):
    kb = [
        [
            {"text": "üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ (PDF)", "callback_data": "policy_pdf"},
            {"text": "üìù –°–æ–≥–ª–∞—Å–∏–µ (PDF)", "callback_data": "consent_pdf"}
        ],
        [
            {"text": "üìú –û—Ñ–µ—Ä—Ç–∞ (PDF)", "callback_data": "offer_pdf"}
        ],
        [
            {"text": "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "callback_data": "agree"},
            {"text": "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "callback_data": "disagree"}
        ]
    ]
    await m.answer(
        AGREEMENT_TEXT,
        reply_markup={"inline_keyboard": kb}
    )

@router.callback_query(F.data == "policy_pdf")
async def send_policy(c: CallbackQuery):
    await c.message.answer_document(
        FSInputFile(POLICY_PDF),
        caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
    )

@router.callback_query(F.data == "consent_pdf")
async def send_consent(c: CallbackQuery):
    await c.message.answer_document(
        FSInputFile(CONSENT_PDF),
        caption="–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–∏—è"
    )

@router.callback_query(F.data == "offer_pdf")
async def send_offer(c: CallbackQuery):
    await c.message.answer_document(
        FSInputFile(OFFER_PDF),
        caption="–ü—É–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–û–§–ï–†–¢–ê)"
    )

@router.callback_query(F.data == "agree")
async def consent_agree_handler(c: CallbackQuery, state: FSMContext):
    await c.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    await state.set_state(ConsentStates.waiting_fio)
    await c.answer()

@router.message(ConsentStates.waiting_fio)
async def get_fio(m: Message, state: FSMContext):
    fio = m.text.strip()
    await state.update_data(fio=fio)
    await m.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ò–ù–ù:")
    await state.set_state(ConsentStates.waiting_inn)

@router.message(ConsentStates.waiting_inn)
async def get_inn(m: Message, state: FSMContext, bot: Bot):
    inn = m.text.strip()
    data = await state.get_data()
    fio = data.get('fio', '')

    user = m.from_user
    status = "–°–æ–≥–ª–∞—Å–µ–Ω"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    import openpyxl
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["User ID", "Username", "–ò–º—è", "–§–ò–û", "–ò–ù–ù", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è"])
    else:
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active

    ws.append([user.id, user.username, user.full_name, fio, inn, status, timestamp])
    wb.save(EXCEL_FILE)

    pdf_name = f"confirm_{user.id}_{int(datetime.now().timestamp())}.pdf"
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas

    cpdf = canvas.Canvas(pdf_name, pagesize=A4)
    cpdf.setFont("DejaVu", 12)
    cpdf.drawString(100, 800, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è")
    cpdf.drawString(100, 770, f"User ID: {user.id}")
    cpdf.drawString(100, 750, f"–ò–º—è: {user.full_name}")
    cpdf.drawString(100, 730, f"–§–ò–û: {fio}")
    cpdf.drawString(100, 710, f"–ò–ù–ù: {inn}")
    cpdf.drawString(100, 690, f"–°—Ç–∞—Ç—É—Å: {status}")
    cpdf.drawString(100, 670, f"–í—Ä–µ–º—è: {timestamp}")
    cpdf.drawString(100, 650, f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {POLICY_PDF}, {CONSENT_PDF}, {OFFER_PDF}")
    cpdf.save()

    await m.answer_document(FSInputFile(pdf_name), caption="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ PDF")
    os.remove(pdf_name)

    await m.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.clear()

    admin_msg = f"{user.full_name or user.username} –≤—ã–±—Ä–∞–ª: —Å–æ–≥–ª–∞—Å–µ–Ω\n–§–ò–û: {fio}\n–ò–ù–ù: {inn}"
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        await bot.send_message(admin_id, admin_msg)

@router.callback_query(F.data == "disagree")
async def consent_disagree_handler(c: CallbackQuery):
    user = c.from_user
    status = "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    import openpyxl
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["User ID", "Username", "–ò–º—è", "–§–ò–û", "–ò–ù–ù", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è"])
    else:
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active

    ws.append([user.id, user.username, user.full_name, "", "", status, timestamp])
    wb.save(EXCEL_FILE)

    await c.message.edit_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
    await c.answer()

@router.message(Command("report"))
async def report(m: Message):
    if m.from_user.id not in ADMINS:
        await m.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not os.path.exists(EXCEL_FILE):
        await m.answer("–§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    temp_name = f"consents_{ts}.xlsx"
    shutil.copy(EXCEL_FILE, temp_name)
    await m.answer_document(FSInputFile(temp_name), caption="üìä –û—Ç—á—ë—Ç –ø–æ —Å–æ–≥–ª–∞—Å–∏—è–º")
    os.remove(temp_name)

async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

async def main():
    import asyncio
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

    app = web.Application()
    app["bot"] = bot

    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    app.router.add_post(WEBHOOK_PATH, webhook_handler.handle)

    setup_application(app, dp, bot=bot)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()

    await on_startup(bot)
    logging.info(f"Webhook –∑–∞–ø—É—â–µ–Ω: {WEBHOOK_URL}")

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
