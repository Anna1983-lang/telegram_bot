import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiohttp import web
import csv
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import openpyxl

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —á–µ—Ä–µ–∑ Render ‚Üí Environment Variables)
TOKEN = os.getenv("BOT_TOKEN", "8475192387:AAESFlpUUqJzlqPTQkcAv1sDVeZJSFOQV0w")

# üìÑ —Ñ–∞–π–ª—ã
EXCEL_FILE = "consents.xlsx"
CONSENT_FILE = "consent2.pdf"
POLICY_FILE = "policy.pdf"

# üë§ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1227847495

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))
pdfmetrics.registerFont(TTFont("DejaVu-Bold", "DejaVuSans-Bold.ttf"))

router = Router()

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
@router.message(CommandStart())
async def start_handler(m: Message):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")],
            [types.InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree")]
        ]
    )
    await m.answer("üîí –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                   "–ù–∞–∂–∏–º–∞—è ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.", 
                   reply_markup=kb)

@router.callback_query(F.data.in_({"agree", "disagree"}))
async def consent_handler(c: CallbackQuery):
    user = c.from_user
    status = "–°–æ–≥–ª–∞—Å–µ–Ω" if c.data == "agree" else "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["UserID", "Username", "Status", "Timestamp"])
        wb.save(EXCEL_FILE)

    wb = openpyxl.load_workbook(EXCEL_FILE)
    ws = wb.active
    ws.append([user.id, user.username, status, timestamp])
    wb.save(EXCEL_FILE)

    await c.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: {status}")
    await c.answer()

@router.message(lambda m: m.text == "/report")
async def report_handler(m: Message):
    if m.from_user.id != ADMIN_ID:
        await m.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if os.path.exists(EXCEL_FILE):
        await m.answer_document(types.FSInputFile(EXCEL_FILE))
    else:
        await m.answer("–§–∞–π–ª —Å —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –ø–æ–∫–∞ –ø—É—Å—Ç.")

# ================== –ó–ê–ü–£–°–ö ==================
async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

async def main():
    bot = Bot(TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    # aiohttp webserver
    app = web.Application()
    app.router.add_post("/webhook", dp.callback_query)
    app.on_startup.append(lambda _: on_startup(bot))
    app.on_cleanup.append(lambda _: on_shutdown(bot))

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render (webhook)")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
